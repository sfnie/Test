<?xml version="1.0" encoding="UTF-8"?>

<beans:beans xmlns="http://www.springframework.org/schema/security"
             xmlns:beans="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
	http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.1.xsd">

    <!--
    Enable security, let the casAuthenticationEntryPoint handle all intercepted urls.
    The CAS_FILTER needs to be in the right position within the filter chain.
    --> 
    <http entry-point-ref="casAuthenticationEntryPoint" auto-config="true">
        <!--<intercept-url pattern="/**" access="ROLE_USER"></intercept-url>-->
        <intercept-url pattern="/**" access="ROLE_ANONYMOUS"></intercept-url>
        <custom-filter position="CAS_FILTER" ref="casAuthenticationFilter"></custom-filter>
    </http>

    <!--
    Required for the casProcessingFilter, so define it explicitly set and
    specify an Id Even though the authenticationManager is created by
    default when namespace based config is used.
    -->
    <authentication-manager alias="authenticationManager">
        <authentication-provider ref="casAuthenticationProvider"></authentication-provider>
    </authentication-manager>

    <!--
    This section is used to configure CAS. The service is the
    actual redirect that will be triggered after the CAS login sequence.
    -->
    <beans:bean id="serviceProperties" class="org.springframework.security.cas.ServiceProperties">
        <!--http://localhost:8088/SpringSecurity 具体应用-->
        <!--j_spring_cas_security_check spring的虚拟URL，此标志标识使用 CAS authentication upon return from CAS SSO login.-->
        <beans:property name="service" value="http://localhost:8080/ssfw/j_spring_cas_security_check"></beans:property>
        <beans:property name="sendRenew" value="false"></beans:property>
    </beans:bean>

    <!--
    The CAS filter handles the redirect from the CAS server and starts the ticket validation.
    -->
    <beans:bean id="casAuthenticationFilter" class="org.springframework.security.cas.web.CasAuthenticationFilter">
        <beans:property name="authenticationManager" ref="authenticationManager"></beans:property>
    </beans:bean>

    <!--
    The entryPoint intercepts all the CAS authentication requests.
    It redirects to the CAS loginUrl for the CAS login page.
    -->
    <beans:bean id="casAuthenticationEntryPoint" class="org.springframework.security.cas.web.CasAuthenticationEntryPoint">
        <!--//SSO登录地址-->
        <beans:property name="loginUrl" value="http://localhost:8080/cas/login"></beans:property> 
        <beans:property name="serviceProperties" ref="serviceProperties"></beans:property>
    </beans:bean>

    <!--
    Handles the CAS ticket processing.
    -->
    <beans:bean id="casAuthenticationProvider" class="org.springframework.security.cas.authentication.CasAuthenticationProvider">
        <beans:property name="authenticationUserDetailsService" ref="authenticationUserDetailsService"/>
        <beans:property name="serviceProperties" ref="serviceProperties"></beans:property>
        <beans:property name="ticketValidator">
            <beans:bean class="org.jasig.cas.client.validation.Cas20ServiceTicketValidator">
                <!--//SSO验证地址-->
                <beans:constructor-arg index="0" value="http://localhost:8080/cas" /> 
            </beans:bean>
        </beans:property>
        <beans:property name="key" value="cas"></beans:property>

    </beans:bean>
    <!-- authorities对应 CAS server的 登录属性， 在此设置到spirng security中，用于spring security的验证 -->
    <beans:bean id="authenticationUserDetailsService" class="org.springframework.security.cas.userdetails.GrantedAuthorityFromAssertionAttributesUserDetailsService">
        <beans:constructor-arg>
            <beans:array>
                <beans:value>authorities</beans:value>
            </beans:array>
        </beans:constructor-arg>
    </beans:bean>
</beans:beans>